plugins {
    id 'java'
    id 'idea'
    id('org.gradle.test-retry') version '1.5.3'
    id 'checkstyle'
}

wrapper {
    gradleVersion = '8.10.2'
}

repositories {
    mavenCentral()
}

group = 'com.unitybank'
version = '1.0-SNAPSHOT'

def allureVersion = '2.29.0'
def aspectJVersion = '1.9.22'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        exceptionFormat = 'FULL'
    }

    retry {
        maxRetries = 2
    }
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}


dependencies {
    // Общие зависимости
    implementation 'com.puppycrawl.tools:checkstyle:10.21.0'
    implementation 'org.aspectj:aspectjrt:1.9.6'
    implementation 'org.aspectj:aspectjweaver:1.9.6'
    implementation 'org.seleniumhq.selenium:selenium-java:4.0.0-beta-1'
    implementation 'com.typesafe:config:1.4.1'
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.4.0'
    implementation 'io.github.bonigarcia:webdrivermanager:5.7.0'
    implementation group: "org.slf4j", name: "slf4j-api", version: "2.0.16"
    compileOnly "org.projectlombok:lombok:1.18.36"
    annotationProcessor "org.projectlombok:lombok:1.18.36"

    // Тестовые зависимости
    testImplementation platform("org.junit:junit-bom:5.11.3")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.5.0'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.8.0'
    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"
    testImplementation "org.slf4j:slf4j-simple:2.0.16"
    testImplementation "ch.qos.logback:logback-classic:1.2.11"
    testCompileOnly "org.projectlombok:lombok:1.18.36"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.36"

    // Jackson
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.18.2"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
}


test {
    ignoreFailures = true
    useJUnitPlatform()
//    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register("apitests", Test) {
    include("api/**/*.class")

    testClassesDirs = files("classes/java/test")
    classpath = files("classes/java/test", "build/resources/test")
}

tasks.register("webtests", Test) {
    include("web/**/*.class")

    testClassesDirs = files("classes/java/test")
    classpath = files("classes/java/test", "build/resources/test")
}

tasks.register("regress", Test) {
    dependsOn tasks["apitests"]
    dependsOn tasks["webtests"]
    onlyIf { System.getenv('STAND') != "Production" }
    useJUnitPlatform {
        includeTags 'regress'
    }
}

checkstyle {
    toolVersion = "10.21.0"
    configFile = file("config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet = resources.text.fromFile("config/xsl/checkstyle-custom.xsl")
    }
}